# -----------------------------------
# Check for Updates
# -----------------------------------
checkUpdates() {
    if [[ $PWD != $OLDPWD || $PWD = $HOME ]]; then
        echo -e "\e[38;5;214mChecking for updates\e[0m"
        cd ~/.dotfiles
        git fetch --quiet
        if git merge-base --is-ancestor origin/master master; then
            print -P '\e[38;5;76mUp to date!\e[0m'
            sleep 1
            clear
            cd ~
        else
            updateConfirmation
        fi
    fi
}

# -----------------------------------
# Update Confirmation
# Update / Continue
# -----------------------------------
updateConfirmation() {
    if read -q "choice?${COLOR_SUCCESS}Updates available. Would you like to continue? (y/n):${COLOR_DEF} "; then
        clear
        echo -e '\e[38;5;214mUpdating configs\e[0m'
        git pull --quiet origin master
        echo -e '\e[38;5;220mInstalling plugins\e[0m'
        vim -E -s -u "~/.dotfiles/nvim/init.vim" +PlugInstall +qall
        cp -i .hyper.js ~/
        echo -e '\e[38;5;76mDone!\e[0m'
        sleep 1
        clear
        source ~/.zshrc
        cd ~
    else
        echo -e '\n\e[38;5;214mOK!\e[0m'
        sleep 1
        clear
        cd ~
    fi
}

# -----------------------------------
# Update Prompt
# -----------------------------------
updatePrompt() {
    PROMPT=''

    if [ -n "$(parseGitBranch)" ]; then
        if [ -n "$(git status --porcelain)" ]; then
            PROMPT='${COLOR_USR}[wolfy] ▶ ${COLOR_DIR}%1~ ${COLOR_GITDIRTY}$(parseGitBranch)${COLOR_DEF} '$PROMPT
        else
            PROMPT='${COLOR_USR}[wolfy] ▶ ${COLOR_DIR}%1~ ${COLOR_GITCLEAN}$(parseGitBranch)${COLOR_DEF} '$PROMPT
        fi
    else
        PROMPT='${COLOR_USR}[wolfy] ▶ ${COLOR_DIR}%1~ ${COLOR_DEF}'$PROMPT
    fi
}

# -----------------------------------
# Parse Git Branch
# -----------------------------------
parseGitBranch() {
    git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/(\1)/p'
}
