# -----------------------------------
# Source Plugins
# -----------------------------------
Plugin() {
    source ~/.dotfiles/zsh/plugins/$1
}

# -----------------------------------
# Setup Prompt
# -----------------------------------
PromptSetup() {
    autoload -U colors && colors
    autoload -Uz vcs_info
    zstyle ':vcs_info:*' enable git svn
    zstyle ':vcs_info:git:*' formats " %b%"

    # Handle Virtual ENV
    virtualenv_info() {
        [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`') '
    }
    export VIRTUAL_ENV_DISABLE_PROMPT=1

    precmd() {
        vcs_info

        if [[ -n ${vcs_info_msg_0_} ]]; then
            STATUS=$(command git status --porcelain 2> /dev/null | tail -n1)
            if [[ -n $STATUS ]]; then
                RPROMPT="%{$bg[red]%}%{$fg_bold[black]%} ${vcs_info_msg_0_}  %{$reset_color%} "

            else
                RPROMPT="%{$bg[green]%}%{$fg_bold[black]%} ${vcs_info_msg_0_}  %{$reset_color%} "
            fi
        else
            if [[ "$USER" == "adamwolf" ]]; then
                PROMPT="%B%{$fg[green]%}[wolfy] ▶ %{$fg[cyan]%}%c%{$reset_color%} "
                PROMPT+='%{$fg[yellow]%}$(virtualenv_info)%{$reset_color%}%'
            else
                PROMPT="%B%{$fg[green]%}[%n] ▶ %{$fg[cyan]%}%c%{$reset_color%} "
            fi
            RPROMPT=""
        fi
    }
    setopt prompt_subst

    # Setup Bindings
    Bindings
}

# -----------------------------------
# Setup History
# -----------------------------------
SetupHistory() {
    HISTFILE=~/.cache/zsh/history
    HISTSIZE=10000
    SAVEHIST=10000
    HISTTIMEFORMAT="[%F %T] "
    setopt EXTENDED_HISTORY
    setopt SHARE_HISTORY
}

# -----------------------------------
# Check for Updates
# -----------------------------------
checkUpdates() {
    echo "$fg[blue]Checking for updates"
    cd ~/.dotfiles
    git fetch --quiet

    # Check if up to date
    if git merge-base --is-ancestor origin/laptop laptop; then
        echo "$fg[green]Up to date!"
        sleep 1
        cd - > /dev/null
        clear
    else
        updateConfirmation
        cd - > /dev/null
        clear
    fi
}

# -----------------------------------
# Update Confirmation
# Update / Continue
# -----------------------------------
updateConfirmation() {
    if read -q "choice?$fg[blue]Updates available. Would you like to continue? (y/n):$reset_color "; then
        echo "\n$fg[cyan]Updating Configs"

        # Pull updated dotfiles
        git pull --quiet origin master

        # Update nvim plugins
        echo "$fg[cyan]Installing Plugins"
        nvim -E -s -u "~/.dotfiles/nvim/init.lua" +PlugInstall +qall

        # Finished
        echo "$fg[green]Done!"
        sleep 5
        clear
        source ~/.zshrc
    fi
}

# -----------------------------------
# Helper Functions
# -----------------------------------
ec() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)
                FILENAME=$1
                mkdir -p "${FILENAME%%.*}-extracted" 
                tar xjf $1 -C "${FILENAME%%.*}-extracted"
                ;;
            *.tar.gz)
                FILENAME=$1
                mkdir -p "${FILENAME%%.*}-extracted" 
                tar xzf $1 -C "${FILENAME%%.*}-extracted"
                ;;
            *.tar)
                FILENAME=$1
                mkdir -p "${FILENAME%%.*}-extracted" 
                tar xf $1  -C "${FILENAME%%.*}-extracted"
                ;;
            *.tbz2)
                FILENAME=$1
                mkdir -p "${FILENAME%%.*}-extracted" 
                tar xjf $1 -C "${FILENAME%%.*}-extracted"
                ;;
            *.rar)
                FILENAME=$1
                mkdir -p "${FILENAME%%.*}-extracted" 
                unrar x $1 "${FILENAME%%.*}-extracted"
                ;;
            *.zip)
                FILENAME=$1
                mkdir -p "${FILENAME%%.*}-extracted" 
                unzip $1 -d "${FILENAME%%.*}-extracted"
                ;;
            *)          printf "\033[31m'$1' cannot be extracted\033[0m\n" ;;
        esac
    else
        printf "\033[31m'$1' is not a valid file\033[0m\n"
    fi
}

mkcmp() {
    if [ $# -eq 2 ]; then
        case $1 in
            bz2) tar -cvjf $2.tar.bz2 $2 ;;
            gz) tar -czvf $2.tar.gz $2 ;;
            rar) rar a $2.rar $2 ;;
            zip) zip -r $2.zip $2 ;;
            *) printf "\033[31m'$1' format not supported\033[0m\n" ;;
        esac
    else
        printf "\033[31mInvalid Syntax\033[0m\n"
        printf "Format should be: \033[32mmkcmp \033[36mformat \033[33mfolder\033[0m\n"
    fi
}

large() {
    sudo find / -xdev -type f -size +$1 -exec grc ls -Salh --color {} +
}

Bindings() {
    autoload edit-command-line; zle -N edit-command-line
    bindkey '^e' edit-command-line
}

# vim: set filetype=zsh :
